/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicLayoutRouteImport } from './routes/_publicLayout'
import { Route as ProductLayoutRouteImport } from './routes/_productLayout'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PublicLayoutHomeRouteImport } from './routes/_publicLayout/home'
import { Route as ProductLayoutProductsRouteRouteImport } from './routes/_productLayout/products/route'
import { Route as PublicLayoutauthRegisterRouteImport } from './routes/_publicLayout/(auth)/register'
import { Route as PublicLayoutauthLoginRouteImport } from './routes/_publicLayout/(auth)/login'
import { Route as ProductLayoutProductsNewRouteImport } from './routes/_productLayout/products/new'
import { Route as ProductLayoutProductsProductIdRouteRouteImport } from './routes/_productLayout/products/$productId/route'
import { Route as ProductLayoutProductsProductIdIndexRouteImport } from './routes/_productLayout/products/$productId/index'
import { Route as ProductLayoutProductsProductIdEditRouteImport } from './routes/_productLayout/products/$productId/edit'

const PublicLayoutRoute = PublicLayoutRouteImport.update({
  id: '/_publicLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const ProductLayoutRoute = ProductLayoutRouteImport.update({
  id: '/_productLayout',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicLayoutHomeRoute = PublicLayoutHomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => PublicLayoutRoute,
} as any)
const ProductLayoutProductsRouteRoute =
  ProductLayoutProductsRouteRouteImport.update({
    id: '/products',
    path: '/products',
    getParentRoute: () => ProductLayoutRoute,
  } as any)
const PublicLayoutauthRegisterRoute =
  PublicLayoutauthRegisterRouteImport.update({
    id: '/(auth)/register',
    path: '/register',
    getParentRoute: () => PublicLayoutRoute,
  } as any)
const PublicLayoutauthLoginRoute = PublicLayoutauthLoginRouteImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => PublicLayoutRoute,
} as any)
const ProductLayoutProductsNewRoute =
  ProductLayoutProductsNewRouteImport.update({
    id: '/new',
    path: '/new',
    getParentRoute: () => ProductLayoutProductsRouteRoute,
  } as any)
const ProductLayoutProductsProductIdRouteRoute =
  ProductLayoutProductsProductIdRouteRouteImport.update({
    id: '/$productId',
    path: '/$productId',
    getParentRoute: () => ProductLayoutProductsRouteRoute,
  } as any)
const ProductLayoutProductsProductIdIndexRoute =
  ProductLayoutProductsProductIdIndexRouteImport.update({
    id: '/',
    path: '/',
    getParentRoute: () => ProductLayoutProductsProductIdRouteRoute,
  } as any)
const ProductLayoutProductsProductIdEditRoute =
  ProductLayoutProductsProductIdEditRouteImport.update({
    id: '/edit',
    path: '/edit',
    getParentRoute: () => ProductLayoutProductsProductIdRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/products': typeof ProductLayoutProductsRouteRouteWithChildren
  '/home': typeof PublicLayoutHomeRoute
  '/products/$productId': typeof ProductLayoutProductsProductIdRouteRouteWithChildren
  '/products/new': typeof ProductLayoutProductsNewRoute
  '/login': typeof PublicLayoutauthLoginRoute
  '/register': typeof PublicLayoutauthRegisterRoute
  '/products/$productId/edit': typeof ProductLayoutProductsProductIdEditRoute
  '/products/$productId/': typeof ProductLayoutProductsProductIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/products': typeof ProductLayoutProductsRouteRouteWithChildren
  '/home': typeof PublicLayoutHomeRoute
  '/products/new': typeof ProductLayoutProductsNewRoute
  '/login': typeof PublicLayoutauthLoginRoute
  '/register': typeof PublicLayoutauthRegisterRoute
  '/products/$productId/edit': typeof ProductLayoutProductsProductIdEditRoute
  '/products/$productId': typeof ProductLayoutProductsProductIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_productLayout': typeof ProductLayoutRouteWithChildren
  '/_publicLayout': typeof PublicLayoutRouteWithChildren
  '/_productLayout/products': typeof ProductLayoutProductsRouteRouteWithChildren
  '/_publicLayout/home': typeof PublicLayoutHomeRoute
  '/_productLayout/products/$productId': typeof ProductLayoutProductsProductIdRouteRouteWithChildren
  '/_productLayout/products/new': typeof ProductLayoutProductsNewRoute
  '/_publicLayout/(auth)/login': typeof PublicLayoutauthLoginRoute
  '/_publicLayout/(auth)/register': typeof PublicLayoutauthRegisterRoute
  '/_productLayout/products/$productId/edit': typeof ProductLayoutProductsProductIdEditRoute
  '/_productLayout/products/$productId/': typeof ProductLayoutProductsProductIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/products'
    | '/home'
    | '/products/$productId'
    | '/products/new'
    | '/login'
    | '/register'
    | '/products/$productId/edit'
    | '/products/$productId/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/products'
    | '/home'
    | '/products/new'
    | '/login'
    | '/register'
    | '/products/$productId/edit'
    | '/products/$productId'
  id:
    | '__root__'
    | '/'
    | '/_productLayout'
    | '/_publicLayout'
    | '/_productLayout/products'
    | '/_publicLayout/home'
    | '/_productLayout/products/$productId'
    | '/_productLayout/products/new'
    | '/_publicLayout/(auth)/login'
    | '/_publicLayout/(auth)/register'
    | '/_productLayout/products/$productId/edit'
    | '/_productLayout/products/$productId/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProductLayoutRoute: typeof ProductLayoutRouteWithChildren
  PublicLayoutRoute: typeof PublicLayoutRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_publicLayout': {
      id: '/_publicLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_productLayout': {
      id: '/_productLayout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ProductLayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_publicLayout/home': {
      id: '/_publicLayout/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof PublicLayoutHomeRouteImport
      parentRoute: typeof PublicLayoutRoute
    }
    '/_productLayout/products': {
      id: '/_productLayout/products'
      path: '/products'
      fullPath: '/products'
      preLoaderRoute: typeof ProductLayoutProductsRouteRouteImport
      parentRoute: typeof ProductLayoutRoute
    }
    '/_publicLayout/(auth)/register': {
      id: '/_publicLayout/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof PublicLayoutauthRegisterRouteImport
      parentRoute: typeof PublicLayoutRoute
    }
    '/_publicLayout/(auth)/login': {
      id: '/_publicLayout/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof PublicLayoutauthLoginRouteImport
      parentRoute: typeof PublicLayoutRoute
    }
    '/_productLayout/products/new': {
      id: '/_productLayout/products/new'
      path: '/new'
      fullPath: '/products/new'
      preLoaderRoute: typeof ProductLayoutProductsNewRouteImport
      parentRoute: typeof ProductLayoutProductsRouteRoute
    }
    '/_productLayout/products/$productId': {
      id: '/_productLayout/products/$productId'
      path: '/$productId'
      fullPath: '/products/$productId'
      preLoaderRoute: typeof ProductLayoutProductsProductIdRouteRouteImport
      parentRoute: typeof ProductLayoutProductsRouteRoute
    }
    '/_productLayout/products/$productId/': {
      id: '/_productLayout/products/$productId/'
      path: '/'
      fullPath: '/products/$productId/'
      preLoaderRoute: typeof ProductLayoutProductsProductIdIndexRouteImport
      parentRoute: typeof ProductLayoutProductsProductIdRouteRoute
    }
    '/_productLayout/products/$productId/edit': {
      id: '/_productLayout/products/$productId/edit'
      path: '/edit'
      fullPath: '/products/$productId/edit'
      preLoaderRoute: typeof ProductLayoutProductsProductIdEditRouteImport
      parentRoute: typeof ProductLayoutProductsProductIdRouteRoute
    }
  }
}

interface ProductLayoutProductsProductIdRouteRouteChildren {
  ProductLayoutProductsProductIdEditRoute: typeof ProductLayoutProductsProductIdEditRoute
  ProductLayoutProductsProductIdIndexRoute: typeof ProductLayoutProductsProductIdIndexRoute
}

const ProductLayoutProductsProductIdRouteRouteChildren: ProductLayoutProductsProductIdRouteRouteChildren =
  {
    ProductLayoutProductsProductIdEditRoute:
      ProductLayoutProductsProductIdEditRoute,
    ProductLayoutProductsProductIdIndexRoute:
      ProductLayoutProductsProductIdIndexRoute,
  }

const ProductLayoutProductsProductIdRouteRouteWithChildren =
  ProductLayoutProductsProductIdRouteRoute._addFileChildren(
    ProductLayoutProductsProductIdRouteRouteChildren,
  )

interface ProductLayoutProductsRouteRouteChildren {
  ProductLayoutProductsProductIdRouteRoute: typeof ProductLayoutProductsProductIdRouteRouteWithChildren
  ProductLayoutProductsNewRoute: typeof ProductLayoutProductsNewRoute
}

const ProductLayoutProductsRouteRouteChildren: ProductLayoutProductsRouteRouteChildren =
  {
    ProductLayoutProductsProductIdRouteRoute:
      ProductLayoutProductsProductIdRouteRouteWithChildren,
    ProductLayoutProductsNewRoute: ProductLayoutProductsNewRoute,
  }

const ProductLayoutProductsRouteRouteWithChildren =
  ProductLayoutProductsRouteRoute._addFileChildren(
    ProductLayoutProductsRouteRouteChildren,
  )

interface ProductLayoutRouteChildren {
  ProductLayoutProductsRouteRoute: typeof ProductLayoutProductsRouteRouteWithChildren
}

const ProductLayoutRouteChildren: ProductLayoutRouteChildren = {
  ProductLayoutProductsRouteRoute: ProductLayoutProductsRouteRouteWithChildren,
}

const ProductLayoutRouteWithChildren = ProductLayoutRoute._addFileChildren(
  ProductLayoutRouteChildren,
)

interface PublicLayoutRouteChildren {
  PublicLayoutHomeRoute: typeof PublicLayoutHomeRoute
  PublicLayoutauthLoginRoute: typeof PublicLayoutauthLoginRoute
  PublicLayoutauthRegisterRoute: typeof PublicLayoutauthRegisterRoute
}

const PublicLayoutRouteChildren: PublicLayoutRouteChildren = {
  PublicLayoutHomeRoute: PublicLayoutHomeRoute,
  PublicLayoutauthLoginRoute: PublicLayoutauthLoginRoute,
  PublicLayoutauthRegisterRoute: PublicLayoutauthRegisterRoute,
}

const PublicLayoutRouteWithChildren = PublicLayoutRoute._addFileChildren(
  PublicLayoutRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProductLayoutRoute: ProductLayoutRouteWithChildren,
  PublicLayoutRoute: PublicLayoutRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
